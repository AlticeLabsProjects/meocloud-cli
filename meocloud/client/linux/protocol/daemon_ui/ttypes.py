#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,slots
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InitResult(object):
  AUTHORIZATION_OK = 0
  AUTHORIZATION_REQUIRED = 1
  OFFLINE = 2
  ROOT_FOLDER_MISSING = 3
  TIMEDOUT = 4

  _VALUES_TO_NAMES = {
    0: "AUTHORIZATION_OK",
    1: "AUTHORIZATION_REQUIRED",
    2: "OFFLINE",
    3: "ROOT_FOLDER_MISSING",
    4: "TIMEDOUT",
  }

  _NAMES_TO_VALUES = {
    "AUTHORIZATION_OK": 0,
    "AUTHORIZATION_REQUIRED": 1,
    "OFFLINE": 2,
    "ROOT_FOLDER_MISSING": 3,
    "TIMEDOUT": 4,
  }

class State(object):
  INITIALIZING = 0
  AUTHORIZING = 1
  WAITING = 2
  SYNCING = 3
  READY = 4
  PAUSED = 5
  ERROR = 6
  SELECTIVE_SYNC = 7
  RESTARTING = 8
  OFFLINE = 9

  _VALUES_TO_NAMES = {
    0: "INITIALIZING",
    1: "AUTHORIZING",
    2: "WAITING",
    3: "SYNCING",
    4: "READY",
    5: "PAUSED",
    6: "ERROR",
    7: "SELECTIVE_SYNC",
    8: "RESTARTING",
    9: "OFFLINE",
  }

  _NAMES_TO_VALUES = {
    "INITIALIZING": 0,
    "AUTHORIZING": 1,
    "WAITING": 2,
    "SYNCING": 3,
    "READY": 4,
    "PAUSED": 5,
    "ERROR": 6,
    "SELECTIVE_SYNC": 7,
    "RESTARTING": 8,
    "OFFLINE": 9,
  }


class SyncStatus(object):
  """
  Attributes:
   - uploadRate
   - downloadRate
   - pendingUploads
   - pendingDownloads
   - uploadETASecs
   - downloadETASecs
   - pendingIndexes
   - syncCode
   - downloadingPath
   - uploadingPath
   - indexingPath
  """

  __slots__ = [ 
    'uploadRate',
    'downloadRate',
    'pendingUploads',
    'pendingDownloads',
    'uploadETASecs',
    'downloadETASecs',
    'pendingIndexes',
    'syncCode',
    'downloadingPath',
    'uploadingPath',
    'indexingPath',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uploadRate', None, None, ), # 1
    (2, TType.I32, 'downloadRate', None, None, ), # 2
    (3, TType.I32, 'pendingUploads', None, None, ), # 3
    (4, TType.I32, 'pendingDownloads', None, None, ), # 4
    (5, TType.I32, 'uploadETASecs', None, None, ), # 5
    (6, TType.I32, 'downloadETASecs', None, None, ), # 6
    (7, TType.I32, 'pendingIndexes', None, None, ), # 7
    (8, TType.I32, 'syncCode', None, None, ), # 8
    (9, TType.STRING, 'downloadingPath', None, None, ), # 9
    (10, TType.STRING, 'uploadingPath', None, None, ), # 10
    (11, TType.STRING, 'indexingPath', None, None, ), # 11
  )

  def __init__(self, uploadRate=None, downloadRate=None, pendingUploads=None, pendingDownloads=None, uploadETASecs=None, downloadETASecs=None, pendingIndexes=None, syncCode=None, downloadingPath=None, uploadingPath=None, indexingPath=None,):
    self.uploadRate = uploadRate
    self.downloadRate = downloadRate
    self.pendingUploads = pendingUploads
    self.pendingDownloads = pendingDownloads
    self.uploadETASecs = uploadETASecs
    self.downloadETASecs = downloadETASecs
    self.pendingIndexes = pendingIndexes
    self.syncCode = syncCode
    self.downloadingPath = downloadingPath
    self.uploadingPath = uploadingPath
    self.indexingPath = indexingPath

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uploadRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.downloadRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pendingUploads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pendingDownloads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.uploadETASecs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.downloadETASecs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.pendingIndexes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.syncCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.downloadingPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.uploadingPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.indexingPath = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SyncStatus')
    if self.uploadRate is not None:
      oprot.writeFieldBegin('uploadRate', TType.I32, 1)
      oprot.writeI32(self.uploadRate)
      oprot.writeFieldEnd()
    if self.downloadRate is not None:
      oprot.writeFieldBegin('downloadRate', TType.I32, 2)
      oprot.writeI32(self.downloadRate)
      oprot.writeFieldEnd()
    if self.pendingUploads is not None:
      oprot.writeFieldBegin('pendingUploads', TType.I32, 3)
      oprot.writeI32(self.pendingUploads)
      oprot.writeFieldEnd()
    if self.pendingDownloads is not None:
      oprot.writeFieldBegin('pendingDownloads', TType.I32, 4)
      oprot.writeI32(self.pendingDownloads)
      oprot.writeFieldEnd()
    if self.uploadETASecs is not None:
      oprot.writeFieldBegin('uploadETASecs', TType.I32, 5)
      oprot.writeI32(self.uploadETASecs)
      oprot.writeFieldEnd()
    if self.downloadETASecs is not None:
      oprot.writeFieldBegin('downloadETASecs', TType.I32, 6)
      oprot.writeI32(self.downloadETASecs)
      oprot.writeFieldEnd()
    if self.pendingIndexes is not None:
      oprot.writeFieldBegin('pendingIndexes', TType.I32, 7)
      oprot.writeI32(self.pendingIndexes)
      oprot.writeFieldEnd()
    if self.syncCode is not None:
      oprot.writeFieldBegin('syncCode', TType.I32, 8)
      oprot.writeI32(self.syncCode)
      oprot.writeFieldEnd()
    if self.downloadingPath is not None:
      oprot.writeFieldBegin('downloadingPath', TType.STRING, 9)
      oprot.writeString(self.downloadingPath)
      oprot.writeFieldEnd()
    if self.uploadingPath is not None:
      oprot.writeFieldBegin('uploadingPath', TType.STRING, 10)
      oprot.writeString(self.uploadingPath)
      oprot.writeFieldEnd()
    if self.indexingPath is not None:
      oprot.writeFieldBegin('indexingPath', TType.STRING, 11)
      oprot.writeString(self.indexingPath)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class Status(object):
  """
  Attributes:
   - state
   - statusCode
   - usedQuota
   - totalQuota
  """

  __slots__ = [ 
    'state',
    'statusCode',
    'usedQuota',
    'totalQuota',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'state', None, None, ), # 1
    (2, TType.I32, 'statusCode', None, None, ), # 2
    (3, TType.I64, 'usedQuota', None, None, ), # 3
    (4, TType.I64, 'totalQuota', None, None, ), # 4
  )

  def __init__(self, state=None, statusCode=None, usedQuota=None, totalQuota=None,):
    self.state = state
    self.statusCode = statusCode
    self.usedQuota = usedQuota
    self.totalQuota = totalQuota

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.statusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.usedQuota = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.totalQuota = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Status')
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 1)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.statusCode is not None:
      oprot.writeFieldBegin('statusCode', TType.I32, 2)
      oprot.writeI32(self.statusCode)
      oprot.writeFieldEnd()
    if self.usedQuota is not None:
      oprot.writeFieldBegin('usedQuota', TType.I64, 3)
      oprot.writeI64(self.usedQuota)
      oprot.writeFieldEnd()
    if self.totalQuota is not None:
      oprot.writeFieldBegin('totalQuota', TType.I64, 4)
      oprot.writeI64(self.totalQuota)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class StatusResult(object):
  """
  Attributes:
   - status
   - syncStatus
   - persistentNotifs
  """

  __slots__ = [ 
    'status',
    'syncStatus',
    'persistentNotifs',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (Status, Status.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'syncStatus', (SyncStatus, SyncStatus.thrift_spec), None, ), # 2
    (3, TType.LIST, 'persistentNotifs', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, status=None, syncStatus=None, persistentNotifs=None,):
    self.status = status
    self.syncStatus = syncStatus
    self.persistentNotifs = persistentNotifs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = Status()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.syncStatus = SyncStatus()
          self.syncStatus.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.persistentNotifs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.persistentNotifs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatusResult')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.syncStatus is not None:
      oprot.writeFieldBegin('syncStatus', TType.STRUCT, 2)
      self.syncStatus.write(oprot)
      oprot.writeFieldEnd()
    if self.persistentNotifs is not None:
      oprot.writeFieldBegin('persistentNotifs', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.persistentNotifs))
      for iter6 in self.persistentNotifs:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class RemoteDirectoryListingResult(object):
  """
  Attributes:
   - statusCode
   - path
   - listing
  """

  __slots__ = [ 
    'statusCode',
    'path',
    'listing',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'statusCode', None, None, ), # 1
    (2, TType.STRING, 'path', None, None, ), # 2
    (3, TType.LIST, 'listing', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, statusCode=None, path=None, listing=None,):
    self.statusCode = statusCode
    self.path = path
    self.listing = listing

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.statusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.listing = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.listing.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoteDirectoryListingResult')
    if self.statusCode is not None:
      oprot.writeFieldBegin('statusCode', TType.I32, 1)
      oprot.writeI32(self.statusCode)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 2)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.listing is not None:
      oprot.writeFieldBegin('listing', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.listing))
      for iter13 in self.listing:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)


class Account(object):
  """
  Attributes:
   - clientID
   - authKey
   - email
   - name
   - deviceName
  """

  __slots__ = [ 
    'clientID',
    'authKey',
    'email',
    'name',
    'deviceName',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientID', None, None, ), # 1
    (2, TType.STRING, 'authKey', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'deviceName', None, None, ), # 5
  )

  def __init__(self, clientID=None, authKey=None, email=None, name=None, deviceName=None,):
    self.clientID = clientID
    self.authKey = authKey
    self.email = email
    self.name = name
    self.deviceName = deviceName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.authKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.deviceName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Account')
    if self.clientID is not None:
      oprot.writeFieldBegin('clientID', TType.STRING, 1)
      oprot.writeString(self.clientID)
      oprot.writeFieldEnd()
    if self.authKey is not None:
      oprot.writeFieldBegin('authKey', TType.STRING, 2)
      oprot.writeString(self.authKey)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.deviceName is not None:
      oprot.writeFieldBegin('deviceName', TType.STRING, 5)
      oprot.writeString(self.deviceName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, getattr(self, key))
      for key in self.__slots__]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False
    for attr in self.__slots__:
      my_val = getattr(self, attr)
      other_val = getattr(other, attr)
      if my_val != other_val:
        return False
    return True

  def __ne__(self, other):
    return not (self == other)

